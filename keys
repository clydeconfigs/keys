#!/usr/bin/bash

#
# CC BY-NC-SA 4.0 Deed 
# keys, a work by clyde
#

new_master_key() {
	echo -n "enter new master key: "
	read -s newmasterkey
	echo
	echo -n "repeat it: "
	read -s newmasterkey2 
	echo
	
	[[ "$newmasterkey" == "$newmasterkey2" ]] || { echo "the keys don't match"; exit 1; }

	touch "$database_pw"
	
	echo -n "$newmasterkey" | b2sum | awk '{print $1}' > "$database_pw"

}
input_pwd() {
	echo -n "type your password: "
	read -s pw
	echo "checking the key..."
	touch "$database_pw"
	chmod 600 "$database_pw"
	echo -n "$pw" | b2sum | awk '{print $1}' > "$database_pw"
}
create() {
	test -e "$KEYS_DIR"/key_database && { echo ""$KEYS_DIR"/key_database already exists"; exit 1; }
	touch "$database"
	chmod 600 "$database"
	echo "TITLE	USERNAME	PASSWORD	TOTP	NOTE	DATE ADDED	(DO NOT DELETE THIS LINE FOR TEMPLATE, EDIT BELOW USING TABS)" > "$database"
	test -e "$KEYS_DIR" || mkdir "$KEYS_DIR"

	echo -e "$(logo "keys: DATABASE CREATION")
"
	
	echo "a) weak ~1 seconds / 0.5GB RAM (19/8/1)"
	echo "b) medium ~2 seconds / 1GB RAM (20/8/1)"
	echo "c) hard ~4 seconds / 2GB RAM (21/8/1)"
	echo "d) pro ~8 seconds / 4GB RAM (22/8/1)"
	echo "e) max ~16 seconds / 8GB RAM (23/8/1)"
	echo "f) extreme ~32 seconds / 16GB RAM (24/8/1)"
	echo "0) experimental (unsafe) 100 ms / 65MB RAM (16/8/1)"
	echo ""
	echo -n "choose the scrypt KDF settings ($(tput bold)[a]$(tput sgr0)/b/c/d/e/f/0): "

	read abcd

	case $abcd in
	    a)N=19;;
	    b)N=20;;
	    c)N=21;;
	    d)N=22;;
	    e)N=23;;
	    f)N=24;;

	  	0)N=16;;
	    *)N=19;;
	esac

	config="N=$N\nr=8\np=1"
	
	echo -e $config > "$KEYS_DIR"/keys.config
	echo -en "\nc=20" >> "$KEYS_DIR"/keys.config
	
	source "$KEYS_DIR"/keys.config

	new_master_key
	scrypt enc --passphrase file:"$database_pw" --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database 1> /dev/null
	
	cd "$KEYS_DIR"
	git init > /dev/null 2>&1
	git config --local user.name "keys"
	git config --local user.email ""
	git add key_database keys.config
	git commit -m "create database" 1> /dev/null
	echo "created at "$KEYS_DIR"/key_database"
}
update() {
	open || { close; exit 1; }

	pw=$(cat "$database_pw")

	touch "/tmp/keys_$USER.lock"
	chmod 600 "/tmp/keys_$USER.lock"
	echo "doing changes to the database... important: do not delete or change any temporary files now"

	# create backup in case something fails
	cp "$KEYS_DIR"/key_database "$KEYS_DIR"/key_database.bkup

	# 1.6 addition: sort the database after updating
	updated_database=$(head -n1 "$database"; sed 1d "$database" | sort) 
	echo "$updated_database" > "$database"
	
	{		
		scrypt enc --passphrase file:"$database_pw" --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database >/dev/null 2>&1 && rm "$KEYS_DIR"/key_database.bkup

		cd "$KEYS_DIR"
		git add key_database keys.config
		git commit -m "database update"
		
		rm -f "/tmp/keys_$USER.lock"
	} 1> /dev/null &
}
changemasterkey() {
	open || { close; exit 1; }

	new_master_key
	
	touch "/tmp/keys_$USER.lock"
	chmod 600 "/tmp/keys_$USER.lock"
	echo "doing changes to the database... important: do not delete or change any temporary files now"

	# create backup in case something fails
	cp "$KEYS_DIR"/key_database "$KEYS_DIR"/key_database.bkup

	{		
		scrypt enc --passphrase file:"$database_pw" --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database >/dev/null 2>&1 && rm "$KEYS_DIR"/key_database.bkup

		cd "$KEYS_DIR"
		git add key_database keys.config
		git commit -m "database master key change"
		
		rm -f "/tmp/keys_$USER.lock"
	} 1> /dev/null &
}
open() {
	test -s "$KEYS_DIR"/key_database || {

		if test -e "/tmp/keys_$USER.lock"; then
			echo -e "\033[33mwarning: a lock was found, but no database. this may be confusing, but it's OK. this is common after using 'list' after a database edit. if this persists, try:\n1) waiting for an edit to finish, and try again\n2) delete /tmp/keys_$USER.lock if you are sure there is no change in course\033[0m" >&2
		elif test -e "$KEYS_DIR"/key_database.bkup; then
			cp "$KEYS_DIR"/key_database.bkup "$KEYS_DIR"/key_database
			echo -e "\033[0;32mfound a backup without the original database... we restored it\033[0m" >&2
		else
			echo ""$KEYS_DIR"/key_database does not exist. creating one..."; { keys create; exit; }
		fi
	}
	
	test -e "$database" && { return 0; }
	
	touch "$database"
	chmod 600 "$database"
	
	if test -e "$database_pw"; then
		scrypt dec --passphrase file:"$database_pw" "$KEYS_DIR"/key_database "$database" || { 
			echo "failure"; rm "$database_pw"; rm "$database"; exit 1; 
		} 
		return 0
	fi
	
	if test -z "$1"; then
		input_pwd
	else
		touch "$database_pw"
		chmod 600 "$database_pw"
		echo -n "$(cat $1)" > "$database_pw"
	fi

	scrypt dec --passphrase file:"$database_pw" "$KEYS_DIR"/key_database "$database" || { 
		echo "failure"; rm "$database_pw"; rm "$database"; exit 1; 
	}
}
close() {
	{ 
		rm -f "$database"
		rm -f "$database_pw"
	} && return 0
}
list() {
    open || { close; exit 1; }

    hide_col2=true
    hide_col5=true

    if [[ $1 == *"n"* ]]; then
        hide_col2=false
    fi

    if [[ $1 == *"l"* ]]; then
        hide_col5=false
    fi

    if [[ $1 == *"t"* ]]; then
	    if [[ "$hide_col2" == "true" && "$hide_col5" == "true" ]]; then
	        awk -F $'\t' '{print $1 "\t" $6}' "$database" 
	    elif [[ "$hide_col2" == "false" && "$hide_col5" == "true" ]]; then
	        awk -F $'\t' '{print $1 "\t" $5 "\t" $6}' "$database" 
	    elif [[ "$hide_col2" == "true" && "$hide_col5" == "false" ]]; then
	        awk -F $'\t' '{print $1 "\t" $2 "\t" $6}' "$database" 
	    else
	        awk -F $'\t' '{print $1 "\t" $2 "\t" $5 "\t" $6}' "$database" 
	    fi | sed 1d | nl -w1 -s". "
    else
	    if [[ "$hide_col2" == "true" && "$hide_col5" == "true" ]]; then
	        awk -F $'\t' '{print $1}' "$database" 
	    elif [[ "$hide_col2" == "false" && "$hide_col5" == "true" ]]; then
	        awk -F $'\t' '{print $1 "\033[94m/\033[0m" $5}' "$database" 
	    elif [[ "$hide_col2" == "true" && "$hide_col5" == "false" ]]; then
	        awk -F $'\t' '{print $1 "\033[94m/\033[0m" $2}' "$database" 
	    else
	        awk -F $'\t' '{print $1 "\033[94m/\033[0m" $2 "\033[94m/\033[0m" $5}' "$database" 
	    fi | sed 1d | nl -w1 -s". "
    fi
}
add() {
	open || { close; exit 1; }
	
	echo -n "type the new title: "
	read title || exit 1
	echo -n "type the new username [press enter for random]: "
	read username || exit 1
	echo -n "type the new password [press for random]: "
	read -s password 
	test -z "$password" && { echo; password=$(gen_pw); }
	test -z "$username" && { echo; username=$(gen_username); }
	echo -n "type the new TOTP key: "
	read totp || exit 1
	echo -n "type a note: "
	read note || exit 1
	
	echo -e "$title\t$username\t$password\t$totp\t$note\t$(date +"%D %T %Z")" >> "$database"
	
	update
}
generate() {
	open || { close; exit 1; }

	test -z "$1" && { echo -e "\e[31merror: specify the entry's name to generate: keys generate foo\e[0m"; exit 1; }
	
	title="$1"
	password=$(gen_pw)
	username=$(gen_username)
	note="autogenerated by keys"
	
	echo -e "$title\t$username\t$password\t$totp\t$note\t$(date +"%D %T %Z")" >> "$database"
	
	update
}
remove() {
	open || { close; exit 1; }

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		bkup=$(sed -n "$n"p $database)
		name=$(sed -n "$n"p $database | awk -F $'\t' '{print $1" "$2}' | tr -d '\n')
    	read -p "(important: press Ctrl+C to cancel) are you sure you want to delete '$name'?" || exit 1
		chmod 600 "$tmp_backup"
		echo "$bkup" >> "$tmp_backup"
		echo "deleted entry '$name', backup in $tmp_backup"
		sed -i "$n"d $database
	else
		echo "argument should be a digit"
		exit 1
	fi

	update
}
get() {
	open >/dev/null 2>&1 || { close; exit 1; }

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		sed -n "$n"p $database | awk -F $'\t' '{print $3}' | tr -d '\n'
	else
		found="$(grep "$1" "$database" | head -n1)"
		name=$(echo -e "$found" | awk -F '\t' '{print $1"\033[94m/\033[0m"$2}')
		echo -e "$name"
		echo -e "$found" | awk -F '\t' '{print $3}'
	fi
}
copy() {
    regex='^[0-9]+$'
   	if [[ $1 =~ $regex ]]; then
		echo -n $(get $2) | xclip -sel c
		echo "clearing clipboard in $c"

		{ 
			sleep $c
			echo "fool" | xclip -sel c
		} &
	else
		found="$(grep "$1" "$database" | head -n1)"
		name=$(echo -e "$found" | awk -F '\t' '{print $1"/"$2}')
		echo -e "$name copied, clearing clipboard in $c"
		echo -e "$found" | awk -F '\t' '{print $3}' | xclip -sel c

		{ 
			sleep $c
			echo "fool" | xclip -sel c
		} &
	fi
}
totp() {
	open >/dev/null 2>&1 || { close; exit 1; }

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		oathtool -b --totp $(sed -n "$n"p $database | awk -F $'\t' '{print $4}' | tr -d '\n')
	else
		echo "argument should be a digit"
	fi
}
edit() {
	open >/dev/null 2>&1 || { close; exit 1; }
	$EDITOR $database
	update	
}
unlock() {
	test -e "/tmp/keys_$USER.lock" && { echo "locked: wait until changes are done or delete /tmp/keys_$USER.lock if something unexpected happened"; exit 1; }
}
logo() {
    local str_length=${#1}
    local width=$(tput cols)
    local space_length=$((width - str_length - 5))
    echo -e "
\e[44m $1$(printf "%-${space_length}s" "" | tr ' ' ' ')\e[0m\n"
}
gen_pw() {
	tr -dc [:graph:] < /dev/urandom | head -c 20
}
gen_username() {
	awk 'BEGIN{srand(); split("bdfghjklmnpqrstvyz",consonants,""); split("aeiou",vowels,""); for(i=1;i<=3;i++) printf "%s%s",consonants[int(rand()*20)],vowels[int(rand()*5)]; for(i=1;i<=2;i++) printf "%s", int(rand()*10)}'
}
help() {
	echo -e "$(logo "keys: USAGE")
	
 (be careful not displaying your logins to anyone when using list/tab/edit/get)
 
 \e[1mcreate\e[0m
  create a database \e[94m(interactive)\e[0m
 \e[1madd\e[0m
   add an entry \e[94m(interactive)\e[0m
 \e[1mremove \e[3mID\e[0m\e[0m
   remove an entry by its ID (removing by \e[3mCONTENT\e[0m is not secure)
 \e[1medit\e[0m
   edit the database (requires $EDITOR variable)
 \e[1mget \e[3mID\e[0m\e[0m
   get an entry by its ID
 \e[1mlist [l/n/t]\e[0m
   list all the entries (options mean: [login/notes/tab])
 \e[1mtab\e[0m
   list all the entries in a fancy way (similar to 'list -lnt')
 \e[1mcopy \e[3mCONTENT\e[0m\e[0m
  looks for an entry and copies it to the clipboard
 \e[1mget \e[3mCONTENT\e[0m\e[0m
  looks for an entry and prints it
 \e[1mclose\e[0m
   close the database
 \e[1musername\e[0m
   generate a random username (example: yipota15)
 \e[1mpassword\e[0m
   generate a random password (example: j.^;+z@:?0WGH\4gmG%V)
"
}

dbid=$(echo "$KEYS_DIR" | b2sum | cut -b1-16)
mkdir /tmp/keys_"$USER"_$dbid 2> /dev/null
chmod 700 /tmp/keys_"$USER"_$dbid

tmpdir=/tmp/keys_"$USER"_$dbid
database="$tmpdir"/database
database_pw="$tmpdir"/password
tmp_backup="$tmpdir"/tmp_backup

idu=$(id -u)
dirid=$(stat -c "%u" "$tmpdir")

if ! [ "$dirid" == $idu ]; then
	echo -e "\e[1;31mfatal error: possible MITM attack! check temporal files permissions in /tmp/\e[0m"
	exit 1
fi

test -s "$database" || close
test -s "$database_pw" || close

if test -z "$KEYS_DIR"; then
	export KEYS_DIR="$HOME/.key_database"
else	
	export KEYS_DIR=$(echo -n "$KEYS_DIR" | sed "s.~.$HOME.g")

	if ! [[ "$KEYS_DIR" == /* ]]; then
		export KEYS_DIR=$(echo -n "$HOME/$KEYS_DIR")
	fi
	
	if [[ "$KEYS_DIR" == */ ]]; then
		export KEYS_DIR=$(echo -n "$KEYS_DIR" | sed 's/.\{1\}$//')
	fi
fi
	
test "$1" == "create" || source "$KEYS_DIR"/keys.config

case "$1" in 
	"create")
		create;;
	"changemasterkey")
		changemasterkey;;
	"open")
		open $2;;
	"close")
		close;;
	"list")
		list $2;;
	"add")
		unlock
		add;;
	"generate")
		unlock
		generate $2;;
	"remove")
		unlock
		remove $2;;
	"edit")
		unlock
		edit;;
	"get")
		test -z $2 && exit 1
		get $2;;
	"totp")
		totp $2;;
	"copy")
		copy $2;;
	"tab")
		list lnt | column -t -s "$(printf '\t')";;
	"password")
		gen_pw;;
	"username")
		gen_username;;

	*)
		help;;
esac
