#!/usr/bin/bash

#
# CC BY-NC-SA 4.0 Deed 
# keys, a work by clyde
#

create() {
	test -e "$KEYS_DIR"/key_database && { echo ""$KEYS_DIR"/key_database already exists"; exit 1; }
	database="/tmp/key_database_$USER"
	touch "$database"
	chmod 600 "$database"
	echo "title	username	password	totp	note" > "$database"
	test -e "$KEYS_DIR" || mkdir "$KEYS_DIR"

	echo "how strong do you want your scrypt KDF settings? ([a]/b/c/d)"
	echo "a) weak ~1 seconds / 0.5GB RAM (19/8/1)"
	echo "b) medium ~2 seconds / 1GB RAM (20/8/1)"
	echo "c) hard ~4 seconds / 2GB RAM (21/8/1)"
	echo "d) pro ~8 seconds / 4GB RAM (22/8/1)"
	echo "e) max ~16 seconds / 8GB RAM (23/8/1)"

	read abcd

	case $abcd in
	    a)
	        config="N=19\nr=8\np=1";;
	    b)
	        config="N=20\nr=8\np=1";;
	    c)
	        config="N=21\nr=8\np=1";;
	    d)
	        config="N=22\nr=8\np=1";;
	    e)
	        config="N=23\nr=8\np=1";;
	    *)
	        config="N=19\nr=8\np=1";;
	esac
	
	echo -e $config > "$KEYS_DIR"/keys.config
	echo -en "\nc=20" >> "$KEYS_DIR"/keys.config
	
	source "$KEYS_DIR"/keys.config

	until scrypt enc --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database; do
		sleep 0.1
	done
	
	cd "$KEYS_DIR"
	git init
	git add key_database keys.config
	git commit -m "create database"
	echo "created at "$KEYS_DIR"/key_database"		
}
update() {
	open || { close; exit 1; }
	database="/tmp/key_database_$USER"

	pw=$(cat "/tmp/key_pw_$USER")

	touch "/tmp/keys_$USER.lock"
	chmod 600 "/tmp/keys_$USER.lock"
	echo "doing changes to the database... important: do not delete or change any temporary files now"

	# create backup in case something fails
	cp "$KEYS_DIR"/key_database "$KEYS_DIR"/key_database.bkup

	{		
		scrypt enc --passphrase file:"/tmp/key_pw_$USER" --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database >/dev/null 2>&1 && rm "$KEYS_DIR"/key_database.bkup

		cd "$KEYS_DIR"
		git add key_database keys.config
		git commit -m "database update"
		
		rm -f "/tmp/keys_$USER.lock"
	} 1> /dev/null &
}
changemasterkey() {
	open || { close; exit 1; }
	database="/tmp/key_database_$USER"

	echo -n "enter new master key: "
	read -s newmasterkey
	echo
	echo -n "repeat it: "
	read -s newmasterkey2 

	[[ "$newmasterkey" == "$newmasterkey2" ]] || { echo "the keys don't match"; exit 1; }

	echo -n "$newmasterkey" > "/tmp/key_pw_$USER"

	pw=$(cat "/tmp/key_pw_$USER")

	touch "/tmp/keys_$USER.lock"
	chmod 600 "/tmp/keys_$USER.lock"
	echo "doing changes to the database... important: do not delete or change any temporary files now"

	# create backup in case something fails
	cp "$KEYS_DIR"/key_database "$KEYS_DIR"/key_database.bkup

	{		
		scrypt enc --passphrase file:"/tmp/key_pw_$USER" --logN $N -r $r -p $p "$database" "$KEYS_DIR"/key_database >/dev/null 2>&1 && rm "$KEYS_DIR"/key_database.bkup

		cd "$KEYS_DIR"
		git add key_database keys.config
		git commit -m "database master key change"
		
		rm -f "/tmp/keys_$USER.lock"
	} 1> /dev/null &
}
open() {
	test -s "$KEYS_DIR"/key_database || {

		if test -e "/tmp/keys_$USER.lock"; then
			echo -e "\033[33mwarning: a lock was found, but no database. this may be confusing, but it's OK. this is common after using 'list' after a database edit. if this persists, try:\n1) waiting for an edit to finish, and try again\n2) delete /tmp/keys_$USER.lock if you are sure there is no change in course\033[0m" 
		elif test -e "$KEYS_DIR"/key_database.bkup; then
			cp "$KEYS_DIR"/key_database.bkup "$KEYS_DIR"/key_database
			echo -e "\033[0;32mfound a backup without the original database... we restored it\033[0m"
		else
			echo ""$KEYS_DIR"/key_database does not exist"; exit 1;
		fi
	}
	
	test -e "/tmp/key_database_$USER" && { echo "open database found"; return 0; }
	
	database="/tmp/key_database_$USER"
	touch "$database"
	chmod 600 "$database"
	
	if test -e "/tmp/key_pw_$USER"; then
		pw=$(cat "/tmp/key_pw_$USER");
		scrypt dec --passphrase file:"/tmp/key_pw_$USER" "$KEYS_DIR"/key_database "$database" || { 
			echo "failure"; rm "/tmp/key_pw_$USER"; rm "$database"; exit 1; 
		} 
		return 0
	fi
	
	if test -z "$1"; then
		echo -n "type your password: "
		read -s pw
		echo "checking the key..."
		touch "/tmp/key_pw_$USER"
		chmod 600 "/tmp/key_pw_$USER"
		echo -n "$pw" > "/tmp/key_pw_$USER"
	else
		touch "/tmp/key_pw_$USER"
		chmod 600 "/tmp/key_pw_$USER"
		echo -n "$(cat $1)" > "/tmp/key_pw_$USER"
	fi

	scrypt dec --passphrase file:"/tmp/key_pw_$USER" "$KEYS_DIR"/key_database "$database" || { 
		echo "failure"; rm "/tmp/key_pw_$USER"; rm "$database"; exit 1; 
	}
}
close() {
	{ 
		rm -f "/tmp/key_database_$USER"
		rm -f "/tmp/key_pw_$USER"
	} && return 0
}
list() {
	open || { close; exit 1; }
	
	if [[ $1 == *"n"* ]]; then
	    hide_col5=true
	fi
	
	if [[ $1 == *"l"* ]]; then
	    hide_col2=true
	fi
	
	awk -F'\t' '{
	    if (hide_col2 && hide_col5) {
	        print $1
	    } else if (hide_col2) {
	        print $1, $5
	    } else if (hide_col5) {
	        print $1, $2
	    } else {
	        print $1, $2, $5
	    }
	}' hide_col2="$hide_col2" hide_col5="$hide_col5" "/tmp/key_database_$USER" | sed 1d | nl -w1 -s". "
}
add() {
	open || { close; exit 1; }
	database="/tmp/key_database_$USER"
	
	echo -n "type the new title: "
	read title || exit 1
	echo -n "type the new username [press enter for random]: "
	read username || exit 1
	echo -n "type the new password [press for random]: "
	read -s password 
	test -z "$password" && { echo; password=$(cat /dev/urandom | tr -dc '[:graph:]' | head -c 20); }
	test -z "$username" && { echo; username=$(awk 'BEGIN{srand(); split("bdfghjklmnpqrstvyz",consonants,""); split("aeiou",vowels,""); for(i=1;i<=3;i++) printf "%s%s",consonants[int(rand()*20)],vowels[int(rand()*5)]; for(i=1;i<=2;i++) printf "%s", int(rand()*10)}'); }
	echo -n "type the new TOTP key: "
	read totp || exit 1
	echo -n "type a note: "
	read note || exit 1
	
	echo -e "$title\t$username\t$password\t$totp\t$note" >> "/tmp/key_database_$USER"
	
	update
}
remove() {
	open || { close; exit 1; }
	database="/tmp/key_database_$USER"

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		bkup=$(sed -n "$n"p $database)
		name=$(sed -n "$n"p $database | awk -F $'\t' '{print $1" "$2}' | tr -d '\n')
    	read -p "(important: press Ctrl+C to cancel) are you sure you want to delete '$name'?" || exit 1
		install -m 600 /dev/null "/tmp/keys_deleted_entry_$USER"
		echo "$bkup" >> "/tmp/keys_deleted_entry_$USER"
		echo "deleted entry '$name', backup in /tmp/keys_deleted_entry_$USER"
		sed -i "$n"d $database
	else
		echo "argument should be a digit"
		exit 1
	fi

	update
}
get() {
	open >/dev/null 2>&1 || { close; exit 1; }
	database="/tmp/key_database_$USER"

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		sed -n "$n"p $database | awk -F $'\t' '{print $3}' | tr -d '\n'
	else
		echo "argument should be a digit"
	fi
}
copy() {
    regex='^[0-9]+$'
   	if [[ $1 =~ $regex ]]; then
		echo -n $(get $2) | xclip -sel c
		echo "clearing clipboard in $c"

		{ 
			sleep $c
			echo "fool" | xclip -sel c
		} &
	else
		database="/tmp/key_database_$USER"
		found="$(grep "$1" "$database" | head -n1)"
		name=$(echo -e "$found" | awk -F '\t' '{print $1"/"$2}')
		echo -e "$name copied, clearing clipboard in $c"
		echo -e "$found" | awk -F '\t' '{print $3}' | xclip -sel c

		{ 
			sleep $c
			echo "fool" | xclip -sel c
		} &
	fi
}
totp() {
	open >/dev/null 2>&1 || { close; exit 1; }
	database="/tmp/key_database_$USER"

    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		oathtool -b --totp $(sed -n "$n"p $database | awk -F $'\t' '{print $4}' | tr -d '\n')
	else
		echo "argument should be a digit"
	fi
}
edit() {
	open >/dev/null 2>&1 || { close; exit 1; }
	database="/tmp/key_database_$USER"
	$EDITOR $database
	update	
}
unlock() {
	test -e "/tmp/keys_$USER.lock" && { echo "locked: wait until changes are done or delete /tmp/keys_$USER.lock if something unexpected happened"; exit 1; }
}

test -s "/tmp/key_database_$USER" || close
test -s "/tmp/key_pw_$USER" || close

test -z "$KEYS_DIR" && export KEYS_DIR="$HOME/.key_database"

test "$1" == "create" || source "$KEYS_DIR"/keys.config

case "$1" in 
	"create")
		create;;
	"changemasterkey")
		changemasterkey;;
	"open")
		open "$2";;
	"close")
		close;;
	"list")
		list "$2";;
	"add")
		unlock
		add;;
	"remove")
		unlock
		remove $2;;
	"edit")
		unlock
		edit;;
	"get")
		get $2;;
	"totp")
		totp $2;;
	"copy")
		copy "$2";;
	*)
		echo "not a valid option (copy/get/create/open/close/list/add/remove/edit)"
		echo "be careful not displaying your logins to anyone when using list/edit/get";;
esac
