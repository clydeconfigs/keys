#!/usr/bin/bash

test -z "$key_database_dir" && export key_database_dir="$HOME/.key_database"

create() {
	test -e "$key_database_dir"/key_database && { echo ""$key_database_dir"/key_database already exists"; exit 1; }
	database="/tmp/key_database_$USER"
	touch "$database"
	chmod 600 "$database"
	echo "title	username	password	totp	note" > "$database"
	test -e "$key_database_dir" || mkdir "$key_database_dir"
	scrypt enc --passphrase dev:stdin-once --logN 20 -r8 -p8 "$database" "$key_database_dir"/key_database
	cd "$key_database_dir"
	git init
	git add key_database
	git commit -m "create database"
	echo "created at "$key_database_dir"/key_database"		
}
update() {
	open || exit
	database="/tmp/key_database_$USER"
	
	pw=$(cat "/tmp/key_pw_$USER")
	scrypt enc --passphrase file:"/tmp/key_pw_$USER" --logN 20 -r8 -p8 "$database" "$key_database_dir"/key_database
	cd "$key_database_dir"
	git add key_database
	git commit -m "database edit"
}
open() {
	test -e "$key_database_dir"/key_database || { echo ""$key_database_dir"/key_database does not exist"; exit 1; }
	
	test -e "/tmp/key_database_$USER" && { echo "open database found"; return; }
	
	database="/tmp/key_database_$USER"
	touch "$database"
	chmod 600 "$database"
	test -e "/tmp/key_pw_$USER" && { 
		pw=$(cat "/tmp/key_pw_$USER");
		scrypt dec --passphrase file:"/tmp/key_pw_$USER" "$key_database_dir"/key_database "$database" || { 
			echo "failure"; rm "/tmp/key_pw_$USER"; rm "$database"; exit 1; 
		} 
		return
	}
	echo -n "type your password: "
	read -s pw
	echo "checking the key..."
	touch "/tmp/key_pw_$USER"
	chmod 600 "/tmp/key_pw_$USER"
	echo -n "$pw" > "/tmp/key_pw_$USER"
	
	scrypt dec --passphrase file:"/tmp/key_pw_$USER" "$key_database_dir"/key_database "$database" || { 
		echo "failure"; rm "/tmp/key_pw_$USER"; rm "$database"; exit 1; 
	}
}
close() {
	rm "/tmp/key_database_$USER"
	rm "/tmp/key_pw_$USER"
	echo "closed"
}
list() {
	open || exit
	cat "/tmp/key_database_$USER" | sed 1d | awk -F $'\t' '{print $1" "$2}' | column -t | nl -w1 -s". "
}
add() {
	open || exit
	database="/tmp/key_database_$USER"
	
	echo -n "type the new title: "
	read title || exit 1
	echo -n "type the new username: "
	read username || exit 1
	echo -n "type the new password (empty for autogeneration): "
	read -s password 
	test -z "$password" && { echo ""; password=$(cat /dev/urandom | tr -dc '[:graph:]' | head -c 20); }
	echo -n "type the new TOTP key: "
	read totp || exit 1
	echo -n "type a note: "
	read note || exit 1
	
	echo -e "$title\t$username\t$password\t$totp\t$note" >> "/tmp/key_database_$USER"
	
	update
}
remove() {
	echo "to do"
}
edit() {
	open || exit
	database="/tmp/key_database_$USER"
	$EDITOR $database
	update	
}
get() {
	open || exit
	database="/tmp/key_database_$USER"

    regex='^[0-9]$'
    if [[ $1 =~ $regex ]]; then
    	n=$(($1 + 1))
		sed -n "$n"p $database | awk '{print $3}'
	else
		echo "argument should be a digit"
	fi
}

case "$1" in 
	"create")
		create
		;;
	"update")
		update
		;;
	"open")
		open
		;;
	"close")
		close
		;;
	"list")
		list
		;;
	"add")
		add
		;;
	"remove")
		remove
		;;
	"edit")
		edit
		;;
	"get")
		get $2
		;;
	*)
		echo "not a valid option (create/update/open/close/list/add/remove/edit)"
		;;
esac
